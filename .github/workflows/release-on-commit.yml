name: Release on Commit

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.md'
      - '.gitignore'
      - '.dockerignore'
      - 'docs/**'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Check and bump version if needed
        id: version_check
        run: |
          VERSION=$(node -p "require('./package.json').version")
          # Trova il tag più recente che rispetta il formato x.y.z
          LATEST_TAG=$(git ls-remote --tags origin | awk -F/ '{print $3}' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tag found, using version $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Confronta la versione di package.json con il tag più recente
            if [ "$VERSION" = "$LATEST_TAG" ]; then
              # Se sono uguali, bump patch version
              npm version patch --no-git-tag-version
              git config user.name github-actions
              git config user.email github-actions@github.com
              git add package.json package-lock.json || true
              git commit -m "chore: bump version [skip ci]"
              git push
              # Ricalcola la nuova versione dopo il bump
              VERSION=$(node -p "require('./package.json').version")
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            else
              # Se la versione è maggiore, procedi
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Estratto automatico delle modifiche (git log)
        id: changelog
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          if git rev-parse "v$VERSION"^ >/dev/null 2>&1; then
            PREV_TAG=$(git tag --sort=-creatordate | grep -v ",$VERSION$" | head -n1)
            if [ -n "$PREV_TAG" ]; then
              git log "$PREV_TAG"..HEAD --pretty=format:'- %s' > changes.txt
            else
              git log --pretty=format:'- %s' > changes.txt
            fi
          else
            git log --pretty=format:'- %s' > changes.txt
          fi
          CHANGELOG=$(cat changes.txt | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_check.outputs.version }}
          name: Release v${{ steps.version_check.outputs.version }}
          body: |
            Release automatico generato dalla versione ${{ steps.version_check.outputs.version }} su main.

            ## Modifiche incluse
            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
